/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ServersServerIdRouteRouteImport } from './routes/servers/$serverId/route'
import { Route as ServersCreateIndexRouteImport } from './routes/servers/create/index'
import { Route as ServersServerIdIndexRouteImport } from './routes/servers/$serverId/index'
import { Route as ServersCreateStoredRouteImport } from './routes/servers/create/stored'
import { Route as ServersCreateAwsSecretRouteImport } from './routes/servers/create/aws-secret'
import { Route as ServersServerIdInitializeRouteImport } from './routes/servers/$serverId/initialize'
import { Route as ServersServerIdTenantCreateRouteImport } from './routes/servers/$serverId/tenant/create'
import { Route as ServersServerIdTenantEnvIdRouteImport } from './routes/servers/$serverId/tenant/$env/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersServerIdRouteRoute = ServersServerIdRouteRouteImport.update({
  id: '/servers/$serverId',
  path: '/servers/$serverId',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersCreateIndexRoute = ServersCreateIndexRouteImport.update({
  id: '/servers/create/',
  path: '/servers/create/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersServerIdIndexRoute = ServersServerIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ServersServerIdRouteRoute,
} as any)
const ServersCreateStoredRoute = ServersCreateStoredRouteImport.update({
  id: '/servers/create/stored',
  path: '/servers/create/stored',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersCreateAwsSecretRoute = ServersCreateAwsSecretRouteImport.update({
  id: '/servers/create/aws-secret',
  path: '/servers/create/aws-secret',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersServerIdInitializeRoute =
  ServersServerIdInitializeRouteImport.update({
    id: '/initialize',
    path: '/initialize',
    getParentRoute: () => ServersServerIdRouteRoute,
  } as any)
const ServersServerIdTenantCreateRoute =
  ServersServerIdTenantCreateRouteImport.update({
    id: '/tenant/create',
    path: '/tenant/create',
    getParentRoute: () => ServersServerIdRouteRoute,
  } as any)
const ServersServerIdTenantEnvIdRoute =
  ServersServerIdTenantEnvIdRouteImport.update({
    id: '/tenant/$env/$id',
    path: '/tenant/$env/$id',
    getParentRoute: () => ServersServerIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/servers/$serverId': typeof ServersServerIdRouteRouteWithChildren
  '/servers/$serverId/initialize': typeof ServersServerIdInitializeRoute
  '/servers/create/aws-secret': typeof ServersCreateAwsSecretRoute
  '/servers/create/stored': typeof ServersCreateStoredRoute
  '/servers/$serverId/': typeof ServersServerIdIndexRoute
  '/servers/create': typeof ServersCreateIndexRoute
  '/servers/$serverId/tenant/create': typeof ServersServerIdTenantCreateRoute
  '/servers/$serverId/tenant/$env/$id': typeof ServersServerIdTenantEnvIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/servers/$serverId/initialize': typeof ServersServerIdInitializeRoute
  '/servers/create/aws-secret': typeof ServersCreateAwsSecretRoute
  '/servers/create/stored': typeof ServersCreateStoredRoute
  '/servers/$serverId': typeof ServersServerIdIndexRoute
  '/servers/create': typeof ServersCreateIndexRoute
  '/servers/$serverId/tenant/create': typeof ServersServerIdTenantCreateRoute
  '/servers/$serverId/tenant/$env/$id': typeof ServersServerIdTenantEnvIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/servers/$serverId': typeof ServersServerIdRouteRouteWithChildren
  '/servers/$serverId/initialize': typeof ServersServerIdInitializeRoute
  '/servers/create/aws-secret': typeof ServersCreateAwsSecretRoute
  '/servers/create/stored': typeof ServersCreateStoredRoute
  '/servers/$serverId/': typeof ServersServerIdIndexRoute
  '/servers/create/': typeof ServersCreateIndexRoute
  '/servers/$serverId/tenant/create': typeof ServersServerIdTenantCreateRoute
  '/servers/$serverId/tenant/$env/$id': typeof ServersServerIdTenantEnvIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/servers/$serverId'
    | '/servers/$serverId/initialize'
    | '/servers/create/aws-secret'
    | '/servers/create/stored'
    | '/servers/$serverId/'
    | '/servers/create'
    | '/servers/$serverId/tenant/create'
    | '/servers/$serverId/tenant/$env/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/servers/$serverId/initialize'
    | '/servers/create/aws-secret'
    | '/servers/create/stored'
    | '/servers/$serverId'
    | '/servers/create'
    | '/servers/$serverId/tenant/create'
    | '/servers/$serverId/tenant/$env/$id'
  id:
    | '__root__'
    | '/'
    | '/servers/$serverId'
    | '/servers/$serverId/initialize'
    | '/servers/create/aws-secret'
    | '/servers/create/stored'
    | '/servers/$serverId/'
    | '/servers/create/'
    | '/servers/$serverId/tenant/create'
    | '/servers/$serverId/tenant/$env/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ServersServerIdRouteRoute: typeof ServersServerIdRouteRouteWithChildren
  ServersCreateAwsSecretRoute: typeof ServersCreateAwsSecretRoute
  ServersCreateStoredRoute: typeof ServersCreateStoredRoute
  ServersCreateIndexRoute: typeof ServersCreateIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/$serverId': {
      id: '/servers/$serverId'
      path: '/servers/$serverId'
      fullPath: '/servers/$serverId'
      preLoaderRoute: typeof ServersServerIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/create/': {
      id: '/servers/create/'
      path: '/servers/create'
      fullPath: '/servers/create'
      preLoaderRoute: typeof ServersCreateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/$serverId/': {
      id: '/servers/$serverId/'
      path: '/'
      fullPath: '/servers/$serverId/'
      preLoaderRoute: typeof ServersServerIdIndexRouteImport
      parentRoute: typeof ServersServerIdRouteRoute
    }
    '/servers/create/stored': {
      id: '/servers/create/stored'
      path: '/servers/create/stored'
      fullPath: '/servers/create/stored'
      preLoaderRoute: typeof ServersCreateStoredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/create/aws-secret': {
      id: '/servers/create/aws-secret'
      path: '/servers/create/aws-secret'
      fullPath: '/servers/create/aws-secret'
      preLoaderRoute: typeof ServersCreateAwsSecretRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/$serverId/initialize': {
      id: '/servers/$serverId/initialize'
      path: '/initialize'
      fullPath: '/servers/$serverId/initialize'
      preLoaderRoute: typeof ServersServerIdInitializeRouteImport
      parentRoute: typeof ServersServerIdRouteRoute
    }
    '/servers/$serverId/tenant/create': {
      id: '/servers/$serverId/tenant/create'
      path: '/tenant/create'
      fullPath: '/servers/$serverId/tenant/create'
      preLoaderRoute: typeof ServersServerIdTenantCreateRouteImport
      parentRoute: typeof ServersServerIdRouteRoute
    }
    '/servers/$serverId/tenant/$env/$id': {
      id: '/servers/$serverId/tenant/$env/$id'
      path: '/tenant/$env/$id'
      fullPath: '/servers/$serverId/tenant/$env/$id'
      preLoaderRoute: typeof ServersServerIdTenantEnvIdRouteImport
      parentRoute: typeof ServersServerIdRouteRoute
    }
  }
}

interface ServersServerIdRouteRouteChildren {
  ServersServerIdInitializeRoute: typeof ServersServerIdInitializeRoute
  ServersServerIdIndexRoute: typeof ServersServerIdIndexRoute
  ServersServerIdTenantCreateRoute: typeof ServersServerIdTenantCreateRoute
  ServersServerIdTenantEnvIdRoute: typeof ServersServerIdTenantEnvIdRoute
}

const ServersServerIdRouteRouteChildren: ServersServerIdRouteRouteChildren = {
  ServersServerIdInitializeRoute: ServersServerIdInitializeRoute,
  ServersServerIdIndexRoute: ServersServerIdIndexRoute,
  ServersServerIdTenantCreateRoute: ServersServerIdTenantCreateRoute,
  ServersServerIdTenantEnvIdRoute: ServersServerIdTenantEnvIdRoute,
}

const ServersServerIdRouteRouteWithChildren =
  ServersServerIdRouteRoute._addFileChildren(ServersServerIdRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ServersServerIdRouteRoute: ServersServerIdRouteRouteWithChildren,
  ServersCreateAwsSecretRoute: ServersCreateAwsSecretRoute,
  ServersCreateStoredRoute: ServersCreateStoredRoute,
  ServersCreateIndexRoute: ServersCreateIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
