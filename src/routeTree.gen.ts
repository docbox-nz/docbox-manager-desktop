/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as InitializeRouteImport } from './routes/initialize'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TenantCreateRouteImport } from './routes/tenant.create'
import { Route as TenantEnvIdRouteImport } from './routes/tenant.$env.$id'

const InitializeRoute = InitializeRouteImport.update({
  id: '/initialize',
  path: '/initialize',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TenantCreateRoute = TenantCreateRouteImport.update({
  id: '/tenant/create',
  path: '/tenant/create',
  getParentRoute: () => rootRouteImport,
} as any)
const TenantEnvIdRoute = TenantEnvIdRouteImport.update({
  id: '/tenant/$env/$id',
  path: '/tenant/$env/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/initialize': typeof InitializeRoute
  '/tenant/create': typeof TenantCreateRoute
  '/tenant/$env/$id': typeof TenantEnvIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/initialize': typeof InitializeRoute
  '/tenant/create': typeof TenantCreateRoute
  '/tenant/$env/$id': typeof TenantEnvIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/initialize': typeof InitializeRoute
  '/tenant/create': typeof TenantCreateRoute
  '/tenant/$env/$id': typeof TenantEnvIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/initialize' | '/tenant/create' | '/tenant/$env/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/initialize' | '/tenant/create' | '/tenant/$env/$id'
  id: '__root__' | '/' | '/initialize' | '/tenant/create' | '/tenant/$env/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InitializeRoute: typeof InitializeRoute
  TenantCreateRoute: typeof TenantCreateRoute
  TenantEnvIdRoute: typeof TenantEnvIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/initialize': {
      id: '/initialize'
      path: '/initialize'
      fullPath: '/initialize'
      preLoaderRoute: typeof InitializeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tenant/create': {
      id: '/tenant/create'
      path: '/tenant/create'
      fullPath: '/tenant/create'
      preLoaderRoute: typeof TenantCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tenant/$env/$id': {
      id: '/tenant/$env/$id'
      path: '/tenant/$env/$id'
      fullPath: '/tenant/$env/$id'
      preLoaderRoute: typeof TenantEnvIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InitializeRoute: InitializeRoute,
  TenantCreateRoute: TenantCreateRoute,
  TenantEnvIdRoute: TenantEnvIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
